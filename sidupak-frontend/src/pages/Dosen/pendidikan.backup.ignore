import React, { useEffect, useState, useCallback } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import PendidikanTable from '../../components/ui/PendidikanTable';
import pendidikanService from '../../services/pendidikan.service';

interface PendidikanItem {
  id: number;
  kategori: string;
  kegiatan: string;
  nilaiPak: number;
  lulusTahun: number;
  jenjang: string;
  dosenId: number;
  fileUrl?: string;
  createdAt: string;
  updatedAt: string;
}

interface PendidikanListResponse {
  data: PendidikanItem[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

interface FilterState {
  search: string;
  kategori: string;
  jenjang: string;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

export default function PendidikanPage() {
  const { user } = useAuth();
  const [list, setList] = useState<PendidikanItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [meta, setMeta] = useState<PendidikanListResponse['pagination']>({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 1,
  });

  const [filters, setFilters] = useState<FilterState>({
    search: '',
    kategori: '',
    jenjang: '',
    sortBy: 'createdAt',
    sortOrder: 'desc',
  });

  // Options untuk dropdown filter
  const [kategoriOptions, setKategoriOptions] = useState<string[]>([]);
  const [jenjangOptions, setJenjangOptions] = useState<string[]>([]);

  const sortOptions = [
    { value: 'createdAt', label: 'Tanggal Dibuat' },
    { value: 'kategori', label: 'Kategori' },
    { value: 'jenjang', label: 'Jenjang' },
    { value: 'nilaiPak', label: 'Nilai PAK' },
    { value: 'lulusTahun', label: 'Tahun Lulus' },
  ];

  // Debounce untuk search
  const [searchDebounce, setSearchDebounce] = useState('');
  useEffect(() => {
    const timer = setTimeout(() => {
      setFilters(prev => ({ ...prev, search: searchDebounce }));
    }, 500);
    return () => clearTimeout(timer);
  }, [searchDebounce]);

  const fetchPendidikan = useCallback(async () => {
    setLoading(true);
    const params = {
      page: meta.page,
      limit: meta.limit,
      search: filters.search,
      kategori: filters.kategori,
      jenjang: filters.jenjang,
      sortBy: filters.sortBy,
      sortOrder: filters.sortOrder,
    };

    try {
      const response = await pendidikanService.findAll(params, user.sub, user.role);
      setList(response.data || []);
      setMeta(response.pagination || { page: 1, limit: 10, total: 0, totalPages: 1 });

      // Extract unique options for filters
      const uniqueKategori = [...new Set(response.data?.map(item => item.kategori) || [])];
      const uniqueJenjang = [...new Set(response.data?.map(item => item.jenjang) || [])];
      setKategoriOptions(uniqueKategori);
      setJenjangOptions(uniqueJenjang);
    } catch (error) {
      console.error('Error fetching data:', error);
      setList([]);
      setMeta({ page: 1, limit: 10, total: 0, totalPages: 1 });
    } finally {
      setLoading(false);
    }
  }, [meta.page, meta.limit, filters, user]);

  useEffect(() => {
    fetchPendidikan();
  }, [fetchPendidikan]);

  const handleEdit = (row: PendidikanItem) => {
    console.log('Edit', row);
    // buka modal, dll.
  };

  const handleDelete = (id: number) => {
    console.log('Delete', id);
    // panggil API delete, lalu refresh list
  };

  const handleFilterChange = (key: keyof FilterState, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    // Reset to first page when filter changes
    setMeta(prev => ({ ...prev, page: 1 }));
  };

  const handlePageChange = (page: number) => {
    setMeta(prev => ({ ...prev, page }));
  };

  const handleLimitChange = (limit: number) => {
    setMeta(prev => ({ ...prev, limit, page: 1 }));
  };

  const resetFilters = () => {
    setFilters({
      search: '',
      kategori: '',
      jenjang: '',
      sortBy: 'createdAt',
      sortOrder: 'desc',
    });
    setSearchDebounce('');
    setMeta(prev => ({ ...prev, page: 1 }));
  };

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">Data Pendidikan & Diklat</h1>
        <p className="text-gray-600">Kelola data pendidikan dan pelatihan dengan fitur pencarian dan filter</p>
      </div>

      {/* Filter Section */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Filter & Pencarian</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          {/* Search Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Pencarian
            </label>
            <input
              type="text"
              placeholder="Cari kategori, kegiatan..."
              value={searchDebounce}
              onChange={(e) => setSearchDebounce(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Kategori Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Kategori
            </label>
            <select
              value={filters.kategori}
              onChange={(e) => handleFilterChange('kategori', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Kategori</option>
              {kategoriOptions.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
          </div>

          {/* Jenjang Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Jenjang
            </label>
            <select
              value={filters.jenjang}
              onChange={(e) => handleFilterChange('jenjang', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Jenjang</option>
              {jenjangOptions.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
          </div>

          {/* Sort Options */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Urutkan Berdasarkan
            </label>
            <div className="flex gap-2">
              <select
                value={filters.sortBy}
                onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {sortOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              <button
                onClick={() => handleFilterChange('sortOrder', filters.sortOrder === 'asc' ? 'desc' : 'asc')}
                className="px-3 py-2 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                title={filters.sortOrder === 'asc' ? 'Ascending' : 'Descending'}
              >
                <i className={`fas ${filters.sortOrder === 'asc' ? 'fa-sort-up' : 'fa-sort-down'}`}></i>
              </button>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-600">
            Menampilkan {list.length} dari {meta.total} data
          </div>
          <div className="flex gap-2">
            <button
              onClick={resetFilters}
              className="px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              <i className="fas fa-refresh mr-1"></i>
              Reset Filter
            </button>
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-600">Per halaman:</span>
              <select
                value={meta.limit}
                onChange={(e) => handleLimitChange(Number(e.target.value))}
                className="px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Loading Indicator */}
      {loading && (
        <div className="text-center py-4">
          <div className="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-gray-500 bg-white">
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Memuat data...
          </div>
        </div>
      )}

      {/* Table */}
      <PendidikanTable 
        data={list} 
        onEdit={handleEdit} 
        onDelete={handleDelete}
      />

      {/* Pagination */}
      <div className="flex justify-between items-center mt-6 bg-white p-4 rounded-lg shadow-md">
        <div className="text-sm text-gray-600">
          Halaman {meta.page} dari {meta.totalPages} 
          ({meta.total} total data)
        </div>
        
        <div className="flex items-center gap-2">
          {/* Previous Button */}
          <button
            onClick={() => handlePageChange(meta.page - 1)}
            disabled={meta.page <= 1}
            className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <i className="fas fa-chevron-left mr-1"></i>
            Sebelumnya
          </button>

          {/* Page Numbers */}
          <div className="flex">
            {(() => {
              const pages = [];
              const showPages = 5; // Show 5 page numbers
              let startPage = Math.max(1, meta.page - Math.floor(showPages / 2));
              let endPage = Math.min(meta.totalPages, startPage + showPages - 1);
              
              if (endPage - startPage + 1 < showPages) {
                startPage = Math.max(1, endPage - showPages + 1);
              }

              for (let i = startPage; i <= endPage; i++) {
                pages.push(
                  <button
                    key={i}
                    onClick={() => handlePageChange(i)}
                    className={`px-3 py-2 text-sm font-medium border ${
                      i === meta.page
                        ? 'bg-blue-600 text-white border-blue-600'
                        : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-50'
                    } ${i === startPage ? 'rounded-l-md' : ''} ${i === endPage ? 'rounded-r-md' : ''} -ml-px`}
                  >
                    {i}
                  </button>
                );
              }
              return pages;
            })()}
          </div>

          {/* Next Button */}
          <button
            onClick={() => handlePageChange(meta.page + 1)}
            disabled={meta.page >= meta.totalPages}
            className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Selanjutnya
            <i className="fas fa-chevron-right ml-1"></i>
          </button>
        </div>
      </div>
    </div>
  );
}